{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(null);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError,\n    isValid: valueIsValid,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"I0xbU6VN4Ki62YkLD2csXwbPDZs=\");\n\nexport default useInput;","map":{"version":3,"sources":["E:/task2/src/componrnts/hooks/useInput.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AACA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AACA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAGA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAGA,QAAMQ,KAAK,GAAE,MAAI;AACbV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHK,IAAAA,QAFG;AAGHO,IAAAA,OAAO,EAAER,YAHN;AAIHE,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AAQH,CAxBD;;GAAMb,Q;;AAyBN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\nconst useInput = (validateValue) => {\r\n    const [enteredValue, setEnteredValue] = useState('')\r\n    const [isTouched, setIsTouched] = useState(null)\r\n\r\n    const valueIsValid = validateValue(enteredValue)\r\n    const hasError = !valueIsValid && isTouched;\r\n    const valueChangeHandler = (event) => {\r\n        setEnteredValue(event.target.value)\r\n    }\r\n    const inputBlurHandler = (event) => {\r\n        setIsTouched(true)\r\n    }\r\n    const reset =()=>{\r\n        setEnteredValue('')\r\n        setIsTouched(false)\r\n    }\r\n    return {\r\n        value: enteredValue,\r\n        hasError,\r\n        isValid: valueIsValid,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    }\r\n}\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}